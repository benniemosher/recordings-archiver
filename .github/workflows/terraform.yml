name: 'Terraform'

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform -chdir=terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform -chdir=terraform init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=terraform validate -no-color
      - name: tflint
        id: tflint
        run: docker run --rm -v "$(pwd):/terraform" -t ghcr.io/terraform-linters/tflint /terraform
      - name: tfsec
        id: tfsec
        run: docker run --rm -v "$(pwd):/terraform" tfsec/tfsec /terraform
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform -chdir=terraform plan -no-color
        continue-on-error: true

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Build output

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v1
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### TFSec \`${{ steps.tfsec.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`
          edit-mode: replace

      # TODO: Make this update the comment instead of make a new one
      # - name: Update Pull Request
      #   uses: actions/github-script@0.9.0
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
      #       #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
      #       #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
      #       #### TFSec \`${{ steps.tfsec.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform -chdir=terraform apply -auto-approve



